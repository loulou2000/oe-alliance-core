diff -Nur linux-3.8.7.org/arch/mips/brcmstb/board.c linux-3.8.7/arch/mips/brcmstb/board.c
--- linux-3.8.7.org/arch/mips/brcmstb/board.c	2013-09-13 08:37:41.000000000 +0200
+++ linux-3.8.7/arch/mips/brcmstb/board.c	2013-11-02 23:40:46.168918578 +0100
@@ -367,11 +367,9 @@
 	PINMUX(11, gpio_92, 1);		/* UARTC RX */
 
 	AON_PINMUX(1, aon_gpio_08, 6);	/* SDIO */
-#if 0 /* do not touch the led gpios */
 	AON_PINMUX(1, aon_gpio_12, 5);
 	AON_PINMUX(1, aon_gpio_13, 5);
 	AON_PINMUX(2, aon_gpio_14, 4);
-#endif
 	AON_PINMUX(2, aon_gpio_15, 5);
 	AON_PINMUX(2, aon_gpio_16, 5);
 	AON_PINMUX(2, aon_gpio_17, 5);
@@ -381,11 +379,9 @@
 
 	/* enable SDIO pullups */
 	AON_PADCTRL(0, aon_gpio_08_pad_ctrl, 2);
-#if 0 /* do not touch the led gpios */
 	AON_PADCTRL(1, aon_gpio_12_pad_ctrl, 2);
 	AON_PADCTRL(1, aon_gpio_13_pad_ctrl, 2);
 	AON_PADCTRL(1, aon_gpio_14_pad_ctrl, 2);
-#endif
 	AON_PADCTRL(1, aon_gpio_15_pad_ctrl, 2);
 	AON_PADCTRL(1, aon_gpio_16_pad_ctrl, 2);
 	AON_PADCTRL(1, aon_gpio_17_pad_ctrl, 2);
@@ -815,9 +811,15 @@
 	ret[0].size = brcm_mtd_rootfs_len;
 	ret[0].name = "rootfs";
 
+#if 0
 	ret[1].offset = 0;
 	ret[1].size = MTDPART_SIZ_FULL;
 	ret[1].name = "entire_device";
+#else
+	ret[1].offset = brcm_mtd_rootfs_start;
+	ret[1].size = brcm_mtd_rootfs_len;
+        ret[1].name = "rootfs(redundant)";
+#endif
 
 	if (brcm_mtd_kernel_len != 0) {
 		ret[2].offset = brcm_mtd_kernel_start;
diff -Nur linux-3.8.7.org/drivers/i2c/i2c-core.c linux-3.8.7/drivers/i2c/i2c-core.c
--- linux-3.8.7.org/drivers/i2c/i2c-core.c	2013-04-15 22:49:30.000000000 +0200
+++ linux-3.8.7/drivers/i2c/i2c-core.c	2013-11-02 23:40:15.892919360 +0100
@@ -50,8 +50,9 @@
    and detach_adapter calls are serialized */
 static DEFINE_MUTEX(core_lock);
 static DEFINE_IDR(i2c_adapter_idr);
+#if 0
 static struct i2c_adapter *first_adapter = NULL, *last_adapter = NULL;
-
+#endif
 static struct device_type i2c_client_type;
 static int i2c_detect(struct i2c_adapter *adapter, struct i2c_driver *driver);
 
@@ -878,12 +879,14 @@
 		return -EINVAL;
 	}
 
+#if 0
 	if (!first_adapter) {
 		first_adapter = adap;
 		last_adapter = adap;
 	}
 	if (last_adapter)
 		adap = last_adapter;
+#endif
 
 	rt_mutex_init(&adap->bus_lock);
 	mutex_init(&adap->userspace_clients_lock);
@@ -1686,8 +1689,10 @@
 	adapter = idr_find(&i2c_adapter_idr, nr);
 	if (adapter && !try_module_get(adapter->owner))
 		adapter = NULL;
+#if 0
 	if (!adapter)
 		last_adapter = NULL;
+#endif
 	mutex_unlock(&core_lock);
 	return adapter;
 }
